op1: ExternKernelSchedulerNode(ExternKernelOut)
op1.writes = [StarDep(name='buf1', mode=None)]
op1.unmet_dependencies = []
op1.met_dependencies = 
    [   StarDep(name='primals_1', mode=None),
        StarDep(name='primals_2', mode=None),
        StarDep(name='primals_3', mode=None)]
op1.outputs = [
    buf1: ExternKernelOut
    buf1.layout = FixedLayout('cuda', torch.float32, size=[2000, 1], stride=[1, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1.node.kernel = extern_kernels.addmm


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 2000}, None)]
op2.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 2000}, None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[2000, 1], stride=[1, 1])
    buf2.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2.group.device = cuda:0
op2.group.iteration = (2000, 1)
op2.sizes = ([2000], [])
buf1_layout = FixedLayout('cuda', torch.float32, size=[2000, 1], stride=[1, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[2000, 1], stride=[1, 1])
class op2_loop_body:
    var_ranges = {z0: 2000}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        sin = ops.sin(load)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(sin, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        cos = ops.cos(load_1)
        add = ops.add(mul, cos)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf2', get_index_2, add, None)
        return store
op2 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties
    triton_helpers.set_driver_to_gpu()

    @triton_heuristics.pointwise(
        size_hints=[2048], 
        filename=__file__,
        triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=108, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'CC5CD2B4144D54CA80B78EEF6F54FBFC888FC6846BD6BCF5764202597E9C3FA5', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2000
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), xmask)
        tmp1 = tl_math.sin(tmp0)
        tmp2 = 2.0
        tmp3 = tmp1 * tmp2
        tmp4 = tl_math.cos(tmp0)
        tmp5 = tmp3 + tmp4
        tl.store(out_ptr0 + (x0), tmp5, xmask)


